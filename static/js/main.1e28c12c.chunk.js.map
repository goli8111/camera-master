{"version":3,"sources":["actions/scene.js","components/PortraitMaster.js","components/camera/CameraCapture.js","actions/camera.js","components/camera/CameraCaptureSelect.js","scene/SceneNavigation.js","scene/IndexScene.js","App.js","serviceWorker.js","reducers/scene.js","reducers/camera.js","reducers/index.js","index.js"],"names":["set_scene","change_scene","type","_change_scene","useStyles","makeStyles","theme","root","width","ContentsBody","position","left","top","bottom","BottomBar1","Height","BottomBar2","mapDispatchToProps","connect","state","_current_scene","scene","console","log","classes","className","url","id","height","styles","Button","onClick","variant","color","_videoUserCameraFlag","btnTopStyle","transform","WebkitTransform","btnBottomStyle","rootStyle","zIndex","backgroundColor","videoStyle","canvasStyle","CameraCapture","props","defaultProps","getCanvas","elem","canvas","getCanvasOverlay","canvasOverlay","getVideo","video","updateCameraGrid","viewState","undefined","canvasContext","getContext","videoWidth","videoHeight","clearRect","save","strokeStyle","lineWidth","globalAlpha","x","moveTo","lineTo","y","stroke","restore","onNextCamera","playCamera","onFlash","setFlashLight","cameraFlashType","onTimerSelect","currentValue","cameraCaptureTimerType","setState","onCapture","delayDuration","setTimeout","dateText","Date","toISOString","saveImage","toDataURL","window","HybridApp","SaveAlbumJpgImage","onBack","onToggleGrid","gridView","onMovieFilter","cameraFilterType","stopCamera","bind","this","setupCamera","Error","navigator","mediaDevices","enumerateDevices","then","devices","forEach","device","kind","label","deviceId","catch","err","name","message","updateCamera","stream","getTracks","track","stop","facingModeText","getUserMedia","audio","facingMode","frameRate","exact","aspectRatio","srcObject","play","pause","src","onPosenetPose","getVideoTracks","capabilities","getCapabilities","torch","applyConstraints","advanced","e","showVideo","style","display","updateCameraFrame","findUpdateCameraFrame","a","showDebugVideo","filter","drawImage","_closeCamera","onCloseCamera","requestAnimationFrame","timerIcon","flashIcon","fontSize","http-equiv","content","playsInline","ref","IconButton","Component","loadingText","camera","dispatch","onAddCanvasData","_addCanvasData","ImgList","overflowX","useEffect","onUploadImageList","onAddImageChange","imageInput","target","files","file","fr","FileReader","onload","event","result","img","Image","AddImage","readAsDataURL","imgUpload","imgCount","GetDirectoryFileCount","i","imgText","GetImageDataFromDirectory","imgsrc","element","document","createElement","margin","getElementById","appendChild","fileInput","accept","onchange","body","click","flexGrow","React","useState","value","setValue","BottomNavigation","onChange","newValue","showLabels","BottomNavigationAction","icon","getActiveScene","App","Boolean","location","hostname","match","initialState","combineReducers","action","Object","assign","appElement","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1e28c12c.chunk.js","sourcesContent":["export const SET_SCENE = 'SET_SCENE';\r\nexport function set_scene(change_scene) {\r\n    return {\r\n        type: SET_SCENE,\r\n        _change_scene: change_scene\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Iframe from 'react-iframe'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      width: \"100%\",\r\n  },\r\n  ContentsBody: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    left: \"0px\",\r\n    top: \"0px\",\r\n    bottom: \"50px\",\r\n  },\r\n  BottomBar1: {\r\n    position: \"absolute\",\r\n    width: \"40%\",\r\n    Height: \"50px\",\r\n    left: \"5%\",\r\n    bottom: \"0px\",\r\n  },\r\n  BottomBar2: {\r\n    position: \"absolute\",\r\n    width: \"40%\",\r\n    left: \"55%\",\r\n    Height: \"50px\",\r\n    bottom: \"0px\",\r\n  }\r\n}));\r\n\r\n\r\nexport const PortraitMaster = ({ _current_scene, set_scene }) => {\r\n    console.log('Index_scene component start');\r\n    const classes = useStyles();\r\n    \r\n    const onCameraCapture = () => {\r\n        set_scene(\"CameraCapture\");\r\n        console.log(\"onCameraCapture\");\r\n    }\r\n\r\n    const onCameraCaptureSubmit = () => {\r\n        set_scene(\"CameraCaptureSelect\");\r\n        console.log(\"onCameraCaptureSubmit\");\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.ContentsBody} >\r\n                <Iframe url=\"https://m.blog.naver.com/elanvital7/221026487974\"\r\n                    position=\"absolute\"\r\n                    width=\"100%\"\r\n                    id=\"myId\"\r\n                    className=\"myClassname\"\r\n                    height=\"100%\"\r\n                    styles={{ height: \"25px\" }} />\r\n\r\n            </div>\r\n      \r\n                <Button onClick={onCameraCapture} className={classes.BottomBar1} variant=\"contained\" color=\"secondary\">\r\n                    사진 찍기\r\n                </Button>\r\n                <Button onClick={onCameraCaptureSubmit} className={classes.BottomBar2} variant=\"contained\" color=\"secondary\">\r\n                    제출하기\r\n                </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PortraitMaster);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { CloseCamera, AddCanvasData } from '../../actions/camera'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport TimerOffOutlinedIcon from '@material-ui/icons/TimerOffOutlined';\r\nimport Timer10OutlinedIcon from '@material-ui/icons/Timer10Outlined';\r\nimport Timer3OutlinedIcon from '@material-ui/icons/Timer3Outlined';\r\nimport RadioButtonCheckedOutlinedIcon from '@material-ui/icons/RadioButtonCheckedOutlined';\r\nimport FlipCameraIosOutlinedIcon from '@material-ui/icons/FlipCameraIosOutlined';\r\nimport ArrowBackIosOutlinedIcon from '@material-ui/icons/ArrowBackIosOutlined';\r\nimport FlashAutoOutlinedIcon from '@material-ui/icons/FlashAutoOutlined';\r\nimport FlashOffOutlinedIcon from '@material-ui/icons/FlashOffOutlined';\r\nimport GridOnOutlinedIcon from '@material-ui/icons/GridOnOutlined';\r\nimport MovieFilterOutlinedIcon from '@material-ui/icons/MovieFilterOutlined';\r\n\r\n//import {CanvasFPS_Update, CanvasFPS_Render} from './../utils/CanvasFPS'\r\n\r\n// var _videoSelectIndex = 0;\r\n// var _videoCamneraList = [];\r\nvar _videoUserCameraFlag = true;\r\n\r\nconst btnTopStyle = {\r\n    color: \"red\",\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    top: \"50px\",\r\n    width: \"100%\",\r\n    transform: 'scale(1.5)', \r\n    WebkitTransform: 'scale(1.5)'\r\n}\r\n\r\nconst btnBottomStyle = {\r\n    color: \"red\",\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    bottom: \"50px\",\r\n    width: \"100%\",\r\n    transform: 'scale(1.5)', \r\n    WebkitTransform: 'scale(1.5)'\r\n}\r\n\r\nconst rootStyle = {\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    width: \"100%\",\r\n    top: \"0%\",\r\n    height: \"100%\",\r\n    zIndex: '-3',\r\n    backgroundColor : 'black'\r\n}\r\n\r\nconst videoStyle = {\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    width: \"100%\",\r\n    top: \"50%\",\r\n    height: \"auto\",\r\n    transform: 'translate(0%, -50%)',\r\n    zIndex: '-2'\r\n}\r\n\r\nconst canvasStyle = {\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    width: \"100%\",\r\n    top: \"50%\",\r\n    height: \"auto\",\r\n    transform: 'translate(0%, -50%)',\r\n    zIndex: '-1'\r\n}\r\n\r\nclass CameraCapture extends Component {\r\n\r\n    static defaultProps = {\r\n        showVideo: false,\r\n        showDebugVideo: true,\r\n        loadingText: 'Loading...please be patient...'\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props, CameraCapture.defaultProps)\r\n        //this.resize = this.resize.bind(this);\r\n        this.stopCamera = this.stopCamera.bind(this);\r\n\r\n        this.state = {\r\n            cameraCaptureTimerType: 0,\r\n            cameraFlashType: 0,\r\n            cameraFilterType: 0,\r\n            gridView: false\r\n        };\r\n    }\r\n\r\n    getCanvas = elem => {\r\n        this.canvas = elem\r\n    }\r\n\r\n    getCanvasOverlay = elem => {\r\n        this.canvasOverlay = elem\r\n    }\r\n\r\n    getVideo = elem => {\r\n        this.video = elem;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            await this.setupCamera();\r\n        } catch (error) {\r\n            throw new Error(\r\n                'This browser does not support video capture, or this device does not have a camera'\r\n            )\r\n        }\r\n        //window.addEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //window.removeEventListener(\"resize\", this.resize);\r\n        this.setFlashLight(false);\r\n    }\r\n\r\n    async setupCamera() {\r\n        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n            throw new Error(\r\n                'Browser API navigator.mediaDevices.getUserMedia not available'\r\n            )\r\n        }\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then(function (devices) {\r\n                devices.forEach(function (device) {\r\n                    if (device.kind === 'videoinput') {\r\n                        //_videoCamneraList.push(device.deviceId);\r\n                    }\r\n                    console.log(device.kind + \": \" + device.label + \", id = \" + device.deviceId);\r\n                });\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            });\r\n\r\n        //this.resize();\r\n        this.playCamera();\r\n        this.updateCamera();\r\n    }\r\n\r\n    async playCamera() {\r\n        if (window.stream) {\r\n            window.stream.getTracks().forEach(track => {\r\n                track.stop();\r\n            });\r\n        }\r\n\r\n        const video = this.video;\r\n        //video.style.transform = 'rotatey(180deg)';\r\n\r\n        // const videoSource = _videoCamneraList[_videoSelectIndex];\r\n        // console.log('videoSource:' + videoSource);\r\n\r\n        var screenWidth = 1280;//1920;//video.width;//window.innerWidth;\r\n        var screenHeight = 720;//1080;//video.height;//window.innerHeight;\r\n\r\n        var facingModeText = 'user';\r\n        if (_videoUserCameraFlag == false) {\r\n            facingModeText = 'environment';\r\n        }\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            //deviceId: videoSource ? { exact: videoSource } : undefined,\r\n            facingMode: facingModeText,\r\n            frameRate: 60,\r\n            width: {exact: screenWidth},\r\n            height: {exact: screenHeight},\r\n            aspectRatio: {\r\n                exact: screenWidth / screenHeight\r\n            }\r\n          }\r\n        })\r\n\r\n        window.stream = stream;\r\n        video.srcObject = stream;\r\n        video.play();\r\n    }\r\n\r\n    stopCamera() {\r\n        console.log('stopCamera call');\r\n        const video = this.video;\r\n        //console.log(video);\r\n        if (undefined == video) {\r\n            return;\r\n        }\r\n        video.pause();\r\n        video.src = \"\";\r\n        if (undefined != video.srcObject) {\r\n            video.srcObject.getTracks()[0].stop();\r\n            video.srcObject = undefined;\r\n        }\r\n        this.props.onPosenetPose(undefined);\r\n        console.log(\"video off\");\r\n    }\r\n\r\n    setFlashLight(state) {\r\n        console.log('setFlashLight:'+state);\r\n        if (undefined == window.stream) {\r\n            return;\r\n        }\r\n        const track = window.stream.getVideoTracks()[0];\r\n        console.log(track);\r\n        if (undefined == track) {\r\n            return;\r\n        }\r\n\r\n        var capabilities = track.getCapabilities();\r\n        console.log(capabilities);\r\n        if (undefined == capabilities) {\r\n            return;\r\n        }\r\n        console.log(capabilities.torch);\r\n        if (capabilities.torch) {\r\n            track.applyConstraints({\r\n                advanced: [{ torch: state }]\r\n            }).catch(e => console.log(e));\r\n        }\r\n    }\r\n\r\n    updateCamera() {\r\n        const canvas = this.canvas;\r\n        if (undefined == canvas) {\r\n            return;\r\n        }\r\n        const canvasContext = canvas.getContext('2d')\r\n        if (undefined == canvasContext) {\r\n            return;\r\n        }\r\n        const video = this.video;\r\n        if (undefined == video) {\r\n            return;\r\n        }\r\n        //console.log('showVideo:' + this.props.showVideo);\r\n        if (false == this.props.showVideo) {\r\n            video.style.display = \"none\";\r\n        }\r\n        else {\r\n            video.style.display = \"block\";\r\n        }\r\n        this.updateCameraFrame(canvasContext)\r\n    }\r\n\r\n    updateCameraFrame(canvasContext) {\r\n        const video = this.video;\r\n        const findUpdateCameraFrame = async () => {\r\n            const canvas = this.canvas;\r\n            if (true == this.props.showDebugVideo && undefined != canvas) {\r\n\r\n                if (video.videoWidth != canvas.width || video.videoHeight != canvas.height) {\r\n                    canvas.width = video.videoWidth;\r\n                    canvas.height = video.videoHeight;\r\n                    canvasContext.width = video.videoWidth;\r\n                    canvasContext.height = video.videoHeight;\r\n                }\r\n                //console.log('resolution width:' + video.videoWidth + \", canvas width:\" + canvas.width);\r\n                //console.log('video pos x:' + canvas.style.left + \", y:\" + canvas.style.top);\r\n                //console.log(video);\r\n                //console.log('video:' + video.left + ',' + video.top + ',' + video.width + ',' + video.height);\r\n                canvasContext.clearRect(0, 0, canvas.width, canvas.height);\r\n                //CanvasFPS_Update();\r\n                canvasContext.save();\r\n\r\n                switch (this.state.cameraFilterType) {\r\n                    case 0: {\r\n                        canvasContext.filter = 'none';\r\n                    }break;\r\n                    case 1: {\r\n                        canvasContext.filter = 'grayscale(100%)';\r\n                    }break;\r\n                    case 2: {\r\n                        canvasContext.filter = 'brightness(100%)';\r\n                    }break;\r\n                    case 3: {\r\n                        canvasContext.filter = 'contrast(100%)';\r\n                    }break;\r\n                    case 4: {\r\n                        canvasContext.filter = 'sepia(100%)';\r\n                    }break;\r\n                    case 5: {\r\n                        canvasContext.filter = 'invert(100%)';\r\n                    }break;\r\n                    case 6: {\r\n                        canvasContext.filter = 'saturate(100%)';\r\n                    }break;\r\n                    case 7: {\r\n                        canvasContext.filter = 'blur(4px)';\r\n                    }break;\r\n                }\r\n                //canvasContext.scale(-1, 1)\r\n                //canvasContext.translate(-video.width, 0)\r\n                \r\n                canvasContext.drawImage(video, 0, 0);//, video.videoWidth, video.videoHeight)\r\n                canvasContext.restore();\r\n\r\n                // var fontSize = canvas.width/20;\r\n                // canvasContext.fillStyle = 'white';\r\n                // canvasContext.shadowColor = 'rgba(0,0,0,1)';\r\n                // canvasContext.shadowBlur = 2;\r\n                // canvasContext.shadowOffsetX = 3;\r\n                // canvasContext.shadowOffsetY = 3;\r\n                // canvasContext.font = fontSize + \"px Arial\";\r\n                // canvasContext.textAlign = \"center\";\r\n                // canvasContext.fillText('목표', canvas.width - fontSize*4, fontSize);\r\n                //CanvasFPS_Render(canvasContext);\r\n            }\r\n\r\n            if ('start' == this.props._closeCamera) {\r\n                this.stopCamera();\r\n                this.props.onCloseCamera('complete');\r\n                return;\r\n            }\r\n            requestAnimationFrame(findUpdateCameraFrame)\r\n        }\r\n        findUpdateCameraFrame()\r\n    }\r\n\r\n    updateCameraGrid = (viewState) => {\r\n        const video = this.video;\r\n        if (undefined == video) {\r\n            return;\r\n        }\r\n\r\n        const canvas = this.canvasOverlay;\r\n        if (undefined == canvas) {\r\n            return;\r\n        }\r\n        const canvasContext = canvas.getContext('2d')\r\n        if (undefined == canvasContext) {\r\n            return;\r\n        }\r\n    \r\n        if (video.videoWidth != canvas.width || video.videoHeight != canvas.height) {\r\n            canvas.width = video.videoWidth;\r\n            canvas.height = video.videoHeight;\r\n            canvasContext.width = video.videoWidth;\r\n            canvasContext.height = video.videoHeight;\r\n        }\r\n\r\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (true == viewState) {\r\n            canvasContext.save();\r\n            canvasContext.strokeStyle = 'rgb(255,0,0)';\r\n            canvasContext.lineWidth = 3;//Math.floor(Math.random() * Math.floor(3))+1; \r\n            canvasContext.globalAlpha = 0.1;\r\n\r\n            for (var x = 0; x <= canvas.width; x += canvas.width/3) {\r\n                canvasContext.moveTo(x, 0);\r\n                canvasContext.lineTo(x, canvas.height);\r\n            }\r\n            for (var y = 0; y <= canvas.height; y += canvas.height/3) {\r\n                canvasContext.moveTo(0, y);\r\n                canvasContext.lineTo(canvas.width, y);\r\n            }\r\n            canvasContext.stroke();\r\n            canvasContext.restore();\r\n        }\r\n    }\r\n\r\n    onNextCamera = () => {\r\n        // _videoSelectIndex++;\r\n        // if (_videoCamneraList.length <= _videoSelectIndex)\r\n        //   _videoSelectIndex = 0;\r\n        // console.log('camera index : ' + _videoSelectIndex);\r\n\r\n        _videoUserCameraFlag = !_videoUserCameraFlag;\r\n        console.log('user camera flag : ' + _videoUserCameraFlag);\r\n        this.playCamera();\r\n        if (true == _videoUserCameraFlag) {\r\n            this.onFlash();\r\n        }\r\n        else {\r\n            this.setFlashLight((this.state.cameraFlashType == 1) ? true : false);\r\n        }\r\n    }\r\n\r\n    onTimerSelect = () => {\r\n        var currentValue = this.state.cameraCaptureTimerType;\r\n        currentValue++;\r\n        if (currentValue > 2) {\r\n            currentValue = 0;\r\n        }\r\n        this.setState(() => {\r\n            return {cameraCaptureTimerType: currentValue};\r\n          });\r\n        console.log(\"timer:\" + currentValue);\r\n    }\r\n\r\n    onCapture = () => {\r\n        const canvas = this.canvas;\r\n        if (undefined == canvas) {\r\n            return;\r\n        }\r\n\r\n        var delayDuration = 0;\r\n        switch (this.state.cameraCaptureTimerType) {\r\n            case 0:\r\n                delayDuration = 0;\r\n                break;\r\n            case 1:\r\n                delayDuration = 3000;\r\n                break;\r\n            case 2:\r\n                delayDuration = 10000;\r\n                break;\r\n        }\r\n\r\n        setTimeout(function () {\r\n            var d = new Date();\r\n            var dateText = d.toISOString();\r\n            var saveImage = canvas.toDataURL(\"image/jpeg\", 1.0);\r\n            window.HybridApp.SaveAlbumJpgImage(saveImage, dateText + \".jpg\");\r\n            console.log(\"onCapture\");\r\n        }, delayDuration);\r\n    }\r\n\r\n    onBack = () => {\r\n        console.log(\"onBack\");\r\n    }\r\n\r\n    onFlash = () => {\r\n        var currentValue = this.state.cameraFlashType;\r\n        currentValue++;\r\n        if (currentValue > 1) {\r\n            currentValue = 0;\r\n        }\r\n        // 유저 카메라 모드에소는 라이트를 쓰지 않게함\r\n        if (true == _videoUserCameraFlag) {\r\n            currentValue = 0;\r\n        }\r\n        this.setState(() => {\r\n            return {cameraFlashType: currentValue};\r\n          });\r\n\r\n        this.setFlashLight((currentValue == 1) ? true : false);\r\n        console.log(\"flash:\" + currentValue);\r\n    }\r\n    \r\n    onToggleGrid = () => {\r\n        var viewState = !this.state.gridView;\r\n        this.setState(() => {\r\n            return {gridView: viewState};\r\n          });\r\n        console.log(\"grid view:\" + viewState);\r\n        this.updateCameraGrid(viewState);\r\n    }\r\n\r\n    onMovieFilter = () => {\r\n        var currentValue = this.state.cameraFilterType;\r\n        currentValue++;\r\n        if (currentValue > 7) {\r\n            currentValue = 0;\r\n        }\r\n        this.setState(() => {\r\n            return {cameraFilterType: currentValue};\r\n          });\r\n        console.log(\"camera filter:\" + currentValue);\r\n    }\r\n    \r\n    render() {\r\n        let timerIcon;\r\n        switch (this.state.cameraCaptureTimerType) {\r\n            // case 0: {\r\n            //     timerIcon = <TimerIcon color=\"primary\" fontSize=\"large\"/>;\r\n            // } break;\r\n            case 0: {\r\n                timerIcon = <TimerOffOutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n            case 1: {\r\n                timerIcon = <Timer3OutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n                \r\n            } break;\r\n            case 2: {\r\n                timerIcon = <Timer10OutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n        }\r\n\r\n        let flashIcon;\r\n        switch (this.state.cameraFlashType) {\r\n            case 0: {\r\n                flashIcon = <FlashOffOutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n            case 1: {\r\n                flashIcon = <FlashAutoOutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n        }\r\n        \r\n        // style={{ position: 'fixed', left: '0', top: '0', width: '100%', height: '100%' }}\r\n        return (\r\n            <div style={rootStyle}>\r\n                <meta http-equiv=\"Content-Security-Policy\" content=\"default-src * gap:; script-src * 'unsafe-inline' 'unsafe-eval'; connect-src *; img-src * data: blob: android-webview-video-poster:; style-src * 'unsafe-inline';\" />\r\n                <video id='videoCamera' style={videoStyle} src=\"\" playsInline ref={this.getVideo} />\r\n                <canvas style={canvasStyle} ref={this.getCanvas} />\r\n                <canvas id='canvasOverlay' style={canvasStyle} ref={this.getCanvasOverlay} />\r\n\r\n                <div style={btnTopStyle}>\r\n                    <IconButton onClick={this.onBack.bind(this)}><ArrowBackIosOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                    <IconButton onClick={this.onFlash.bind(this)}>{flashIcon}</IconButton>\r\n                    <IconButton onClick={this.onToggleGrid.bind(this)}><GridOnOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                    <IconButton onClick={this.onMovieFilter.bind(this)}><MovieFilterOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                </div>\r\n\r\n                <div style={btnBottomStyle}>\r\n                    <IconButton onClick={this.onTimerSelect.bind(this)}>{timerIcon}</IconButton>\r\n                    <IconButton onClick={this.onCapture.bind(this)}><RadioButtonCheckedOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                    <IconButton onClick={this.onNextCamera.bind(this)}><FlipCameraIosOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        _current_scene: state.scene._current_scene,\r\n        _closeCamera: state.camera._closeCamera\r\n    };\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onCloseCamera: (state) => dispatch(CloseCamera(state)),\r\n        onAddCanvasData: (state) => dispatch(AddCanvasData(state))\r\n    }\r\n}\r\n\r\nCameraCapture = connect(mapStateToProps, mapDispatchToProps)(CameraCapture);\r\n\r\nexport default CameraCapture;\r\n","export const CLOSECAMERA = 'CLOSECAMERA';\r\nexport function CloseCamera(closeCamera) {\r\n    return {\r\n        type: CLOSECAMERA,\r\n        _closeCamera: closeCamera\r\n    };\r\n}\r\n\r\nexport const ADDCANVASDATA = 'ADDCANVASDATA';\r\nexport function AddCanvasData(data) {\r\n    return {\r\n        type: ADDCANVASDATA,\r\n        _addCanvasData: data\r\n    };\r\n}\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  ContentsBody: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    left: \"0px\",\r\n    top: \"0px\",\r\n    bottom: \"50px\",\r\n  },\r\n  ImgList: {\r\n    display: \"flex\",\r\n    overflowX: \"auto\",\r\n  },\r\n  BottomBar1: {\r\n    position: \"fixed\",\r\n    width: \"40%\",\r\n    Height: \"50px\",\r\n    left: \"5%\",\r\n    bottom: \"0px\",\r\n  },\r\n  BottomBar2: {\r\n    position: \"fixed\",\r\n    width: \"40%\",\r\n    left: \"55%\",\r\n    Height: \"50px\",\r\n    bottom: \"0px\",\r\n  }\r\n}));\r\n\r\n\r\nexport const CameraCaptureSelect = ({ _current_scene, set_scene }) => {\r\n  console.log('Index_scene component start');\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    onUploadImageList();\r\n  });\r\n\r\n  const imgUpload = (file) => {\r\n    console.log(\"imgUpload:\");\r\n    console.log(file);\r\n    var fr = new FileReader();\r\n    fr.onload = function (event) {\r\n      var src = event.target.result;\r\n      var img = new Image();\r\n      img.onload = function () {\r\n        AddImage(fr.result);\r\n      };\r\n      img.src = src;\r\n    };\r\n    fr.readAsDataURL(file);\r\n  }\r\n\r\n  const onAddImageChange = (imageInput) => {\r\n    console.log(\"onAddImageChange\");\r\n    if (imageInput.target.files[0]) {\r\n      imgUpload(imageInput.target.files[0]);\r\n    }\r\n  }\r\n\r\n  const onAddImageSelect = () => {\r\n    console.log(\"onAddImageSelect\");\r\n    var fileInput = document.createElement('input');\r\n    fileInput.type = \"file\";\r\n    fileInput.accept = \"image/*\";\r\n    fileInput.style.display = 'none';\r\n    fileInput.onchange = onAddImageChange;\r\n    document.body.appendChild(fileInput);\r\n    fileInput.click();\r\n  }\r\n\r\n  const onUploadImageList = () => {\r\n    console.log('onUploadImageList');\r\n    if (undefined != window.HybridApp) {\r\n      var imgCount = window.HybridApp.GetDirectoryFileCount();\r\n      for (var i = 0; i < imgCount; i++) {\r\n        var imgText = window.HybridApp.GetImageDataFromDirectory(i);\r\n        AddImage(imgText);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onUploadData = () => {\r\n    console.log('onUploadData');\r\n  }\r\n\r\n  const AddImage = (imgsrc) => {\r\n    var element = document.createElement('img');\r\n    element.style.display = \"block\";\r\n    element.style.width = \"65%\";\r\n    element.style.height = \"auto\";\r\n    element.style.margin = \"5px\";\r\n    element.src = imgsrc;\r\n    var imgList = document.getElementById('imagelist');\r\n    imgList.appendChild(element);\r\n  }\r\n\r\n  // className={classes.ContentsBody}\r\n  return (\r\n    <div className={classes.root}>\r\n      <div id='imagelist' className={classes.ImgList}>\r\n      </div>\r\n      {/* <input type='file' accept='image/*' onChange={onAddImageChange}/> */}\r\n      <Button onClick={onAddImageSelect} className={classes.BottomBar1} variant=\"contained\" color=\"secondary\">\r\n        이미지 선택\r\n      </Button>\r\n      <Button onClick={onUploadData} className={classes.BottomBar2} variant=\"contained\" color=\"secondary\">\r\n        제출하기\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CameraCaptureSelect);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        // height: '100%',\r\n        bottom: 0,\r\n        position: 'fixed',\r\n        flexGrow: 1,\r\n    },\r\n});\r\n\r\nexport const SceneNavigation = ({ _current_scene, set_scene }) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    return (\r\n        <BottomNavigation\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                set_scene(newValue);\r\n                setValue(newValue);\r\n            }}\r\n            showLabels\r\n            className={classes.root}\r\n        >\r\n            <BottomNavigationAction value=\"PortraitMaster\" label=\"Home\" icon={<HomeIcon />} />\r\n            <BottomNavigationAction value=\"CameraCapture\" label=\"사진찍기\" icon={<CameraAltIcon />} />\r\n\r\n        </BottomNavigation>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SceneNavigation);","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport PortraitMaster from './../components/PortraitMaster'\r\nimport CameraCapture from './../components/camera/CameraCapture'\r\nimport CameraCaptureSelect from './../components/camera/CameraCaptureSelect'\r\nimport SceneNavigation from './SceneNavigation'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n  },\r\n}));\r\n\r\n\r\nexport const IndexScene = ({ _current_scene, set_scene }) => {\r\n  console.log('Index_scene component start');\r\n  const classes = useStyles();\r\n\r\n  const getActiveScene = () => {\r\n    switch(_current_scene) {\r\n      case 'CameraCapture': {\r\n        return (<CameraCapture />);\r\n      }\r\n      case 'PortraitMaster': {\r\n        return (<PortraitMaster />);\r\n      }\r\n      case 'CameraCaptureSelect': {\r\n        return (<CameraCaptureSelect />);\r\n      }\r\n      default: {\r\n        return (<PortraitMaster />); // SceneNavigation\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {getActiveScene()}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndexScene);","import React from 'react';\r\nimport './App.css';\r\nimport IndexScene from './scene/IndexScene'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <IndexScene />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SET_SCENE } from '../actions/scene'\r\n\r\nconst initialState = {\r\n    _current_scene: 'IndexScene',\r\n};\r\n\r\nexport default function quest(state = initialState, action) {\r\n    console.log('reducer scene action call:' + action.type);\r\n    switch(action.type) {\r\n        case SET_SCENE:\r\n            console.log('SET_SCENE:' + action._change_scene);\r\n            return Object.assign({}, state, {\r\n                _current_scene: action._change_scene\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { CLOSECAMERA, ADDCANVASDATA } from '../actions/camera'\r\n\r\nconst initialState = {\r\n    _closeCamera: ''\r\n    //_canvasData:[]\r\n};\r\n\r\nexport default function camera(state = initialState, action) {\r\n    console.log('reducer scene action call:' + action.type);\r\n    switch (action.type) {\r\n        case CLOSECAMERA:\r\n            console.log('CLOSECAMERA:' + action._closeCamera);\r\n            return Object.assign({}, state, {\r\n                _closeCamera: action._closeCamera\r\n            });\r\n        case ADDCANVASDATA:\r\n            // console.log('ADDCANVASDATA:' + action._addCanvasData);\r\n            // return { \r\n            //     ...state,\r\n            //     _canvasData:[...state._canvasData, action._addCanvasData]\r\n            // }\r\n\r\n            // return Object.assign({}, state, {\r\n            //     _closeCamera: action._closeCamera\r\n            // });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport scene from './scene'\r\nimport camera from './camera'\r\n\r\nexport default combineReducers({\r\n    scene,\r\n    camera\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux';\r\nimport { Provider  } from 'react-redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst appElement = document.getElementById('root');\r\n\r\n// 리덕스 개발자도구 적용\r\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(rootReducer, devTools);\r\n// const store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  appElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}