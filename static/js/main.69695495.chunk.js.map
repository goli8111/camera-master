{"version":3,"sources":["actions/scene.js","components/PortraitMaster.js","components/camera/CameraCapture.js","actions/camera.js","scene/SceneNavigation.js","scene/IndexScene.js","App.js","serviceWorker.js","reducers/scene.js","reducers/camera.js","reducers/index.js","index.js"],"names":["set_scene","change_scene","type","_change_scene","useStyles","makeStyles","theme","root","width","ContentsBody","position","left","top","bottom","BottomBar1","Height","BottomBar2","mapDispatchToProps","connect","state","_current_scene","scene","console","log","classes","className","url","id","height","styles","Button","onClick","variant","color","_videoUserCameraFlag","btnTopStyle","transform","WebkitTransform","btnBottomStyle","rootStyle","zIndex","backgroundColor","videoStyle","CameraCapture","props","defaultProps","getCanvas","elem","canvas","getCanvasOverlay","canvasOverlay","getVideo","video","updateCameraGrid","viewState","undefined","canvasContext","getContext","clearRect","save","strokeStyle","lineWidth","globalAlpha","x","moveTo","lineTo","y","stroke","restore","onNextCamera","playCamera","onTimerSelect","currentValue","cameraCaptureTimerType","setState","onCapture","delayDuration","setTimeout","saveImage","toDataURL","this","onAddCanvasData","onBack","onFlash","cameraFlashType","onToggleGrid","gridView","onMovieFilter","cameraFilterType","stopCamera","bind","setupCamera","Error","navigator","mediaDevices","enumerateDevices","then","devices","forEach","device","kind","label","deviceId","catch","err","name","message","window","stream","getTracks","track","stop","facingModeText","getUserMedia","audio","facingMode","frameRate","exact","aspectRatio","srcObject","play","pause","src","onPosenetPose","timerIcon","flashIcon","fontSize","style","playsInline","ref","IconButton","Component","showVideo","showDebugVideo","loadingText","_closeCamera","camera","dispatch","onCloseCamera","_addCanvasData","flexGrow","React","useState","value","setValue","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","icon","getActiveScene","App","Boolean","location","hostname","match","initialState","combineReducers","action","Object","assign","appElement","document","getElementById","devTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","rootReducer","ReactDOM","render","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.69695495.chunk.js","sourcesContent":["export const SET_SCENE = 'SET_SCENE';\r\nexport function set_scene(change_scene) {\r\n    return {\r\n        type: SET_SCENE,\r\n        _change_scene: change_scene\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Iframe from 'react-iframe'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      width: \"100%\",\r\n  },\r\n  ContentsBody: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    left: \"0px\",\r\n    top: \"0px\",\r\n    bottom: \"50px\",\r\n  },\r\n  BottomBar1: {\r\n    position: \"absolute\",\r\n    width: \"40%\",\r\n    Height: \"50px\",\r\n    left: \"5%\",\r\n    bottom: \"0px\",\r\n  },\r\n  BottomBar2: {\r\n    position: \"absolute\",\r\n    width: \"40%\",\r\n    left: \"55%\",\r\n    Height: \"50px\",\r\n    bottom: \"0px\",\r\n  }\r\n}));\r\n\r\n\r\nexport const PortraitMaster = ({ _current_scene, set_scene }) => {\r\n    console.log('Index_scene component start');\r\n    const classes = useStyles();\r\n    \r\n    const onCameraCapture = () => {\r\n        set_scene(\"CameraCapture\");\r\n        console.log(\"onCameraCapture\");\r\n    }\r\n\r\n    const onCameraCaptureSubmit = () => {\r\n        //set_scene(\"CameraCapture\");\r\n        console.log(\"onCameraCaptureSubmit\");\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.ContentsBody} >\r\n                <Iframe url=\"https://m.blog.naver.com/elanvital7/221026487974\"\r\n                    position=\"absolute\"\r\n                    width=\"100%\"\r\n                    id=\"myId\"\r\n                    className=\"myClassname\"\r\n                    height=\"100%\"\r\n                    styles={{ height: \"25px\" }} />\r\n\r\n            </div>\r\n      \r\n                <Button onClick={onCameraCapture} className={classes.BottomBar1} variant=\"contained\" color=\"secondary\">\r\n                    사진 찍기\r\n                </Button>\r\n                <Button onClick={onCameraCaptureSubmit} className={classes.BottomBar2} variant=\"contained\" color=\"secondary\">\r\n                    제출하기\r\n                </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PortraitMaster);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { CloseCamera, AddCanvasData } from '../../actions/camera'\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport TimerOffOutlinedIcon from '@material-ui/icons/TimerOffOutlined';\r\nimport Timer10OutlinedIcon from '@material-ui/icons/Timer10Outlined';\r\nimport Timer3OutlinedIcon from '@material-ui/icons/Timer3Outlined';\r\nimport RadioButtonCheckedOutlinedIcon from '@material-ui/icons/RadioButtonCheckedOutlined';\r\nimport FlipCameraIosOutlinedIcon from '@material-ui/icons/FlipCameraIosOutlined';\r\nimport ArrowBackIosOutlinedIcon from '@material-ui/icons/ArrowBackIosOutlined';\r\nimport FlashAutoOutlinedIcon from '@material-ui/icons/FlashAutoOutlined';\r\nimport FlashOffOutlinedIcon from '@material-ui/icons/FlashOffOutlined';\r\nimport GridOnOutlinedIcon from '@material-ui/icons/GridOnOutlined';\r\nimport MovieFilterOutlinedIcon from '@material-ui/icons/MovieFilterOutlined';\r\n\r\n//import {CanvasFPS_Update, CanvasFPS_Render} from './../utils/CanvasFPS'\r\n\r\n// var _videoSelectIndex = 0;\r\n// var _videoCamneraList = [];\r\nvar _videoUserCameraFlag = true;\r\n\r\nconst btnTopStyle = {\r\n    color: \"red\",\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    top: \"50px\",\r\n    width: \"100%\",\r\n    transform: 'scale(1.5)', \r\n    WebkitTransform: 'scale(1.5)'\r\n}\r\n\r\nconst btnBottomStyle = {\r\n    color: \"red\",\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    bottom: \"50px\",\r\n    width: \"100%\",\r\n    transform: 'scale(1.5)', \r\n    WebkitTransform: 'scale(1.5)'\r\n}\r\n\r\nconst rootStyle = {\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    width: \"100%\",\r\n    top: \"0%\",\r\n    height: \"100%\",\r\n    zIndex: '-3',\r\n    backgroundColor : 'black'\r\n}\r\n\r\nconst videoStyle = {\r\n    position: \"fixed\",\r\n    left: \"0px\",\r\n    width: \"100%\",\r\n    top: \"50%\",\r\n    height: \"auto\",\r\n    transform: 'translate(0%, -50%)',\r\n    zIndex: '-2'\r\n}\r\n\r\nclass CameraCapture extends Component {\r\n\r\n    static defaultProps = {\r\n        showVideo: false,\r\n        showDebugVideo: true,\r\n        loadingText: 'Loading...please be patient...'\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props, CameraCapture.defaultProps)\r\n        //this.resize = this.resize.bind(this);\r\n        this.stopCamera = this.stopCamera.bind(this);\r\n\r\n        this.state = {\r\n            cameraCaptureTimerType: 0,\r\n            cameraFlashType: 0,\r\n            cameraFilterType: 0,\r\n            gridView: false\r\n        };\r\n    }\r\n\r\n    getCanvas = elem => {\r\n        this.canvas = elem\r\n    }\r\n\r\n    getCanvasOverlay = elem => {\r\n        this.canvasOverlay = elem\r\n    }\r\n\r\n    getVideo = elem => {\r\n        this.video = elem;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //this.resize();\r\n        try {\r\n            await this.setupCamera()\r\n        } catch (error) {\r\n            throw new Error(\r\n                'This browser does not support video capture, or this device does not have a camera'\r\n            )\r\n        }\r\n        //window.addEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //window.removeEventListener(\"resize\", this.resize);\r\n    }\r\n\r\n    // resize() {\r\n    //     console.log('resize start');\r\n    //     const video = this.video;\r\n    //     if (undefined == video) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     const canvas = this.canvas;\r\n    //     if (undefined == canvas) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     const canvasOverlay = this.canvasOverlay;\r\n    //     if (undefined == canvasOverlay) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     var screenWidth = window.innerWidth;\r\n    //     var screenHeight = window.innerHeight;\r\n    //     console.log('resize apply:' + screenWidth + ',' + screenHeight);\r\n\r\n    //     video.style.position = 'fixed';\r\n    //     video.style.left = '0px';\r\n    //     video.style.top = '0px';\r\n    //     video.left = 0;\r\n    //     video.top = 0;\r\n    //     video.width = screenWidth;\r\n    //     video.height = screenHeight;\r\n    //     // video.setAttribute('width', screenWidth);\r\n    //     // video.setAttribute('height', screenHeight);\r\n\r\n    //     canvas.style.position = 'fixed';\r\n    //     canvas.style.left = '0px';\r\n    //     canvas.style.top = '0px';\r\n    //     canvas.width = screenWidth;\r\n    //     canvas.height = screenHeight;\r\n\r\n    //     canvasOverlay.style.position = 'fixed';\r\n    //     canvasOverlay.style.left = '0px';\r\n    //     canvasOverlay.style.top = '0px';\r\n    //     canvasOverlay.width = screenWidth;\r\n    //     canvasOverlay.height = screenHeight;\r\n    // }\r\n\r\n    async setupCamera() {\r\n        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n            throw new Error(\r\n                'Browser API navigator.mediaDevices.getUserMedia not available'\r\n            )\r\n        }\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then(function (devices) {\r\n                devices.forEach(function (device) {\r\n                    if (device.kind === 'videoinput') {\r\n                        //_videoCamneraList.push(device.deviceId);\r\n                    }\r\n                    console.log(device.kind + \": \" + device.label + \", id = \" + device.deviceId);\r\n                });\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            });\r\n\r\n        //this.resize();\r\n        this.playCamera();\r\n        //this.updateCamera();\r\n    }\r\n\r\n    async playCamera() {\r\n        if (window.stream) {\r\n            window.stream.getTracks().forEach(track => {\r\n                track.stop();\r\n            });\r\n        }\r\n\r\n        const video = this.video;\r\n        //video.style.transform = 'rotatey(180deg)';\r\n\r\n        // const videoSource = _videoCamneraList[_videoSelectIndex];\r\n        // console.log('videoSource:' + videoSource);\r\n\r\n        var screenWidth = 1280;//1920;//video.width;//window.innerWidth;\r\n        var screenHeight = 720;//1080;//video.height;//window.innerHeight;\r\n\r\n        // environment\r\n        // user\r\n        var facingModeText = 'user';\r\n        if (_videoUserCameraFlag == false) {\r\n            facingModeText = 'environment';\r\n        }\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          audio: false,\r\n          video: {\r\n            //deviceId: videoSource ? { exact: videoSource } : undefined,\r\n            facingMode: facingModeText,\r\n            frameRate: 60,\r\n            width: {exact: screenWidth},\r\n            height: {exact: screenHeight},\r\n            aspectRatio: {\r\n                exact: screenWidth / screenHeight\r\n            }\r\n            // width: screenWidth,\r\n            // height: screenHeight\r\n          }\r\n        })\r\n\r\n        window.stream = stream;\r\n        video.srcObject = stream;\r\n        video.play();\r\n    }\r\n\r\n    stopCamera() {\r\n        console.log('stopCamera call');\r\n        const video = this.video;\r\n        //console.log(video);\r\n        if (undefined == video) {\r\n            return;\r\n        }\r\n        video.pause();\r\n        video.src = \"\";\r\n        if (undefined != video.srcObject) {\r\n            video.srcObject.getTracks()[0].stop();\r\n            video.srcObject = undefined;\r\n        }\r\n        this.props.onPosenetPose(undefined);\r\n        console.log(\"video off\");\r\n    }\r\n\r\n    // updateCamera() {\r\n    //     const canvas = this.canvas;\r\n    //     if (undefined == canvas) {\r\n    //         return;\r\n    //     }\r\n    //     const canvasContext = canvas.getContext('2d')\r\n    //     if (undefined == canvasContext) {\r\n    //         return;\r\n    //     }\r\n    //     const video = this.video;\r\n    //     if (undefined == video) {\r\n    //         return;\r\n    //     }\r\n    //     //console.log('showVideo:' + this.props.showVideo);\r\n    //     if (false == this.props.showVideo) {\r\n    //         video.style.display = \"none\";\r\n    //     }\r\n    //     else {\r\n    //         video.style.display = \"block\";\r\n    //     }\r\n    //     this.updateCameraFrame(canvasContext)\r\n    // }\r\n\r\n    // updateCameraFrame(canvasContext) {\r\n    //     const video = this.video;\r\n    //     const findUpdateCameraFrame = async () => {\r\n    //         const canvas = this.canvas;\r\n    //         if (true == this.props.showDebugVideo && undefined != canvas) {\r\n    //             //console.log(video);\r\n    //             //console.log('video:' + video.left + ',' + video.top + ',' + video.width + ',' + video.height);\r\n    //             canvasContext.clearRect(0, 0, canvas.width, canvas.height);\r\n    //             //CanvasFPS_Update();\r\n    //             canvasContext.save();\r\n\r\n    //             switch (this.state.cameraFilterType) {\r\n    //                 case 0: {\r\n    //                     canvasContext.filter = 'none';\r\n    //                 }break;\r\n    //                 case 1: {\r\n    //                     canvasContext.filter = 'grayscale(100%)';\r\n    //                 }break;\r\n    //                 case 2: {\r\n    //                     canvasContext.filter = 'brightness(100%)';\r\n    //                 }break;\r\n    //                 case 3: {\r\n    //                     canvasContext.filter = 'contrast(100%)';\r\n    //                 }break;\r\n    //                 case 4: {\r\n    //                     canvasContext.filter = 'sepia(100%)';\r\n    //                 }break;\r\n    //                 case 5: {\r\n    //                     canvasContext.filter = 'invert(100%)';\r\n    //                 }break;\r\n    //                 case 6: {\r\n    //                     canvasContext.filter = 'saturate(100%)';\r\n    //                 }break;\r\n    //                 case 7: {\r\n    //                     canvasContext.filter = 'blur(4px)';\r\n    //                 }break;\r\n    //             }\r\n    //             //canvasContext.scale(-1, 1)\r\n    //             //canvasContext.translate(-video.width, 0)\r\n                \r\n    //             canvasContext.drawImage(video, video.left, video.top, video.width, video.height)\r\n    //             canvasContext.restore();\r\n\r\n    //             // var fontSize = canvas.width/20;\r\n    //             // canvasContext.fillStyle = 'white';\r\n    //             // canvasContext.shadowColor = 'rgba(0,0,0,1)';\r\n    //             // canvasContext.shadowBlur = 2;\r\n    //             // canvasContext.shadowOffsetX = 3;\r\n    //             // canvasContext.shadowOffsetY = 3;\r\n    //             // canvasContext.font = fontSize + \"px Arial\";\r\n    //             // canvasContext.textAlign = \"center\";\r\n    //             // canvasContext.fillText('목표', canvas.width - fontSize*4, fontSize);\r\n    //             //CanvasFPS_Render(canvasContext);\r\n    //         }\r\n\r\n    //         if ('start' == this.props._closeCamera) {\r\n    //             this.stopCamera();\r\n    //             this.props.onCloseCamera('complete');\r\n    //             return;\r\n    //         }\r\n    //         requestAnimationFrame(findUpdateCameraFrame)\r\n    //     }\r\n    //     findUpdateCameraFrame()\r\n    // }\r\n\r\n    updateCameraGrid = (viewState) => {\r\n        const canvas = this.canvasOverlay;\r\n        if (undefined == canvas) {\r\n            return;\r\n        }\r\n        const canvasContext = canvas.getContext('2d')\r\n        if (undefined == canvasContext) {\r\n            return;\r\n        }\r\n    \r\n        canvasContext.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        if (true == viewState) {\r\n            canvasContext.save();\r\n            canvasContext.strokeStyle = 'rgb(200,200,200)';\r\n            canvasContext.lineWidth = 3;//Math.floor(Math.random() * Math.floor(3))+1; \r\n            canvasContext.globalAlpha = 0.1;\r\n\r\n            for (var x = 0; x <= canvas.width; x += 100) {\r\n                canvasContext.moveTo(x, 0);\r\n                canvasContext.lineTo(x, canvas.height);\r\n            }\r\n            for (var y = 0; y <= canvas.height; y += 100) {\r\n                canvasContext.moveTo(0, y);\r\n                canvasContext.lineTo(canvas.width, y);\r\n            }\r\n            canvasContext.stroke();\r\n            canvasContext.restore();\r\n        }\r\n    }\r\n\r\n    onNextCamera = () => {\r\n        // _videoSelectIndex++;\r\n        // if (_videoCamneraList.length <= _videoSelectIndex)\r\n        //   _videoSelectIndex = 0;\r\n        // console.log('camera index : ' + _videoSelectIndex);\r\n\r\n        _videoUserCameraFlag = !_videoUserCameraFlag;\r\n        console.log('user camera flag : ' + _videoUserCameraFlag);\r\n\r\n        this.playCamera();\r\n    }\r\n\r\n    onTimerSelect = () => {\r\n        var currentValue = this.state.cameraCaptureTimerType;\r\n        currentValue++;\r\n        if (currentValue > 2) {\r\n            currentValue = 0;\r\n        }\r\n        this.setState(() => {\r\n            return {cameraCaptureTimerType: currentValue};\r\n          });\r\n        console.log(\"timer:\" + currentValue);\r\n    }\r\n\r\n    onCapture = () => {\r\n        const canvas = this.canvas;\r\n        if (undefined == canvas) {\r\n            return;\r\n        }\r\n\r\n        var delayDuration = 0;\r\n        switch (this.state.cameraCaptureTimerType) {\r\n            case 0:\r\n                delayDuration = 0;\r\n                break;\r\n            case 1:\r\n                delayDuration = 3000;\r\n                break;\r\n            case 2:\r\n                delayDuration = 10000;\r\n                break;\r\n        }\r\n        \r\n        setTimeout(function () {\r\n            var saveImage = canvas.toDataURL(\"image/jpeg\", 1.0);\r\n            this.props.onAddCanvasData(saveImage);\r\n             console.log(\"onCapture\");\r\n        }, delayDuration);\r\n    }\r\n\r\n    onBack = () => {\r\n        console.log(\"onBack\");\r\n    }\r\n\r\n    onFlash = () => {\r\n        var currentValue = this.state.cameraFlashType;\r\n        currentValue++;\r\n        if (currentValue > 1) {\r\n            currentValue = 0;\r\n        }\r\n        this.setState(() => {\r\n            return {cameraFlashType: currentValue};\r\n          });\r\n        console.log(\"flash:\" + currentValue);\r\n    }\r\n    \r\n    onToggleGrid = () => {\r\n        var viewState = !this.state.gridView;\r\n        this.setState(() => {\r\n            return {gridView: viewState};\r\n          });\r\n        console.log(\"grid view:\" + viewState);\r\n        this.updateCameraGrid(viewState);\r\n    }\r\n\r\n    onMovieFilter = () => {\r\n        var currentValue = this.state.cameraFilterType;\r\n        currentValue++;\r\n        if (currentValue > 7) {\r\n            currentValue = 0;\r\n        }\r\n        this.setState(() => {\r\n            return {cameraFilterType: currentValue};\r\n          });\r\n        console.log(\"camera filter:\" + currentValue);\r\n    }\r\n    \r\n    render() {\r\n        let timerIcon;\r\n        switch (this.state.cameraCaptureTimerType) {\r\n            // case 0: {\r\n            //     timerIcon = <TimerIcon color=\"primary\" fontSize=\"large\"/>;\r\n            // } break;\r\n            case 0: {\r\n                timerIcon = <TimerOffOutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n            case 1: {\r\n                timerIcon = <Timer3OutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n                \r\n            } break;\r\n            case 2: {\r\n                timerIcon = <Timer10OutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n        }\r\n\r\n        let flashIcon;\r\n        switch (this.state.cameraFlashType) {\r\n            case 0: {\r\n                flashIcon = <FlashAutoOutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n            case 1: {\r\n                flashIcon = <FlashOffOutlinedIcon color=\"primary\" fontSize=\"large\"/>;\r\n            } break;\r\n        }\r\n        \r\n        // style={{ position: 'fixed', left: '0', top: '0', width: '100%', height: '100%' }}\r\n        return (\r\n            <div style={rootStyle}>\r\n                <video id='videoCamera' style={videoStyle} src=\"\" playsInline ref={this.getVideo} />\r\n                <canvas style={{ position: 'fixed', left: '0%', top: '0%', zIndex: '-1' }} ref={this.getCanvas} />\r\n                <canvas id='canvasOverlay' style={{ position: 'fixed', left: '0%', top: '0%', zIndex: '-1' }} ref={this.getCanvasOverlay} />\r\n\r\n                <div style={btnTopStyle}>\r\n                    <IconButton onClick={this.onBack.bind(this)}><ArrowBackIosOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                    <IconButton onClick={this.onFlash.bind(this)}>{flashIcon}</IconButton>\r\n                    <IconButton onClick={this.onToggleGrid.bind(this)}><GridOnOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                    <IconButton onClick={this.onMovieFilter.bind(this)}><MovieFilterOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                </div>\r\n\r\n                <div style={btnBottomStyle}>\r\n                    <IconButton onClick={this.onTimerSelect.bind(this)}>{timerIcon}</IconButton>\r\n                    <IconButton onClick={this.onCapture.bind(this)}><RadioButtonCheckedOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                    <IconButton onClick={this.onNextCamera.bind(this)}><FlipCameraIosOutlinedIcon color=\"primary\" fontSize=\"large\" /></IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        _current_scene: state.scene._current_scene,\r\n        _closeCamera: state.camera._closeCamera\r\n    };\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onCloseCamera: (state) => dispatch(CloseCamera(state)),\r\n        onAddCanvasData: (state) => dispatch(AddCanvasData(state))\r\n    }\r\n}\r\n\r\nCameraCapture = connect(mapStateToProps, mapDispatchToProps)(CameraCapture);\r\n\r\nexport default CameraCapture;\r\n","export const CLOSECAMERA = 'CLOSECAMERA';\r\nexport function CloseCamera(closeCamera) {\r\n    return {\r\n        type: CLOSECAMERA,\r\n        _closeCamera: closeCamera\r\n    };\r\n}\r\n\r\nexport const ADDCANVASDATA = 'ADDCANVASDATA';\r\nexport function AddCanvasData(data) {\r\n    return {\r\n        type: ADDCANVASDATA,\r\n        _addCanvasData: data\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        // height: '100%',\r\n        bottom: 0,\r\n        position: 'fixed',\r\n        flexGrow: 1,\r\n    },\r\n});\r\n\r\nexport const SceneNavigation = ({ _current_scene, set_scene }) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    return (\r\n        <BottomNavigation\r\n            value={value}\r\n            onChange={(event, newValue) => {\r\n                set_scene(newValue);\r\n                setValue(newValue);\r\n            }}\r\n            showLabels\r\n            className={classes.root}\r\n        >\r\n            <BottomNavigationAction value=\"PortraitMaster\" label=\"Home\" icon={<HomeIcon />} />\r\n            <BottomNavigationAction value=\"CameraCapture\" label=\"사진찍기\" icon={<CameraAltIcon />} />\r\n\r\n        </BottomNavigation>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SceneNavigation);","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { set_scene } from '../actions/scene';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport PortraitMaster from './../components/PortraitMaster'\r\nimport CameraCapture from './../components/camera/CameraCapture'\r\nimport SceneNavigation from './SceneNavigation'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n  },\r\n}));\r\n\r\n\r\nexport const IndexScene = ({ _current_scene, set_scene }) => {\r\n  console.log('Index_scene component start');\r\n  const classes = useStyles();\r\n\r\n  const getActiveScene = () => {\r\n    switch(_current_scene) {\r\n      case 'CameraCapture': {\r\n        return (<CameraCapture />);\r\n      }\r\n      case 'PortraitMaster': {\r\n        return (<PortraitMaster />);\r\n      }\r\n      default: {\r\n        return (<SceneNavigation />);\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {getActiveScene()}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  _current_scene: state.scene._current_scene\r\n});\r\nconst mapDispatchToProps = { set_scene };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IndexScene);","import React from 'react';\r\nimport './App.css';\r\nimport IndexScene from './scene/IndexScene'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <IndexScene />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SET_SCENE } from '../actions/scene'\r\n\r\nconst initialState = {\r\n    _current_scene: 'IndexScene',\r\n};\r\n\r\nexport default function quest(state = initialState, action) {\r\n    console.log('reducer scene action call:' + action.type);\r\n    switch(action.type) {\r\n        case SET_SCENE:\r\n            console.log('SET_SCENE:' + action._change_scene);\r\n            return Object.assign({}, state, {\r\n                _current_scene: action._change_scene\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { CLOSECAMERA, ADDCANVASDATA } from '../actions/camera'\r\n\r\nconst initialState = {\r\n    _closeCamera: ''\r\n    //_canvasData:[]\r\n};\r\n\r\nexport default function camera(state = initialState, action) {\r\n    console.log('reducer scene action call:' + action.type);\r\n    switch (action.type) {\r\n        case CLOSECAMERA:\r\n            console.log('CLOSECAMERA:' + action._closeCamera);\r\n            return Object.assign({}, state, {\r\n                _closeCamera: action._closeCamera\r\n            });\r\n        case ADDCANVASDATA:\r\n            // console.log('ADDCANVASDATA:' + action._addCanvasData);\r\n            // return { \r\n            //     ...state,\r\n            //     _canvasData:[...state._canvasData, action._addCanvasData]\r\n            // }\r\n\r\n            // return Object.assign({}, state, {\r\n            //     _closeCamera: action._closeCamera\r\n            // });\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport scene from './scene'\r\nimport camera from './camera'\r\n\r\nexport default combineReducers({\r\n    scene,\r\n    camera\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore } from 'redux';\r\nimport { Provider  } from 'react-redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst appElement = document.getElementById('root');\r\n\r\n// 리덕스 개발자도구 적용\r\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(rootReducer, devTools);\r\n// const store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  appElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}